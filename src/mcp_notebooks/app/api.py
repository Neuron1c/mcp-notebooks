from fastapi import FastAPI
from fastapi.responses import RedirectResponse
from fastmcp import FastMCP

from mcp_notebooks.models.schema import (
    StartKernelResponse,
    CodeSnippet,
    ExecuteResponse,
    ShutdownResponse,
)
from mcp_notebooks.core.manager import SessionManager
from mcp_notebooks.app.exception_handler import register_exception_handlers

mcp = FastMCP("mcp_notebooks")
app = FastAPI()
register_exception_handlers(app)
session_manager = SessionManager()


@mcp.tool("start", description="Start a new Jupyter kernel session")
@app.post("/start", response_model=StartKernelResponse)
def start_kernel() -> StartKernelResponse:
    """
    Start a new Jupyter kernel session.

    Returns:
        A unique session ID and a message indicating the session was successfully created.
    """

    session_id = session_manager.create_session()
    return StartKernelResponse(session_id=session_id, message="success")


@mcp.tool("execute", description="Execute code in a Jupyter kernel session")
@app.post("/execute", response_model=ExecuteResponse)
def execute_code(snippet: CodeSnippet) -> ExecuteResponse:
    """
    Execute a code snippet in the specified kernel session.

    Args:
        snippet: A CodeSnippet object containing the session ID and code to run.

    Returns:
        Outputs generated by the code execution and the execution count.
    """

    session = session_manager.get_session(snippet.session_id)
    response = session.execute(snippet.code)

    return ExecuteResponse(
        outputs=response.outputs, execution_count=response.execution_count
    )


@mcp.tool("shutdown", description="Shut down a Jupyter kernel session")
@app.post("/shutdown/{session_id}")
def shutdown_kernel(session_id: str) -> ShutdownResponse:
    """
    Shut down an active kernel session and return its notebook contents.

    Args:
        session_id: The ID of the kernel session to shut down.

    Returns:
        A dictionary containing the notebook contents accumulated during the session.
    """

    output = session_manager.delete_session(session_id)
    return ShutdownResponse(
        message="success",
        notebook=output,
    )


@app.get("/")
async def redirect_docs():
    return RedirectResponse("/docs")
